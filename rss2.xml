<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tmr&#39;s Blog</title>
    <link>https://HNUrookie1.github.io/</link>
    
    <atom:link href="https://hnurookie1.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 21 Sep 2024 07:10:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Poem</title>
      <link>https://hnurookie1.github.io/2024/09/21/Poem/</link>
      <guid>https://hnurookie1.github.io/2024/09/21/Poem/</guid>
      <pubDate>Sat, 21 Sep 2024 06:45:20 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;《孙权劝学》司马光&quot;&gt;&lt;a href=&quot;#《孙权劝学》司马光&quot; class=&quot;headerlink&quot; title=&quot;《孙权劝学》司马光&quot;&gt;&lt;/a&gt;《孙权劝学》司马光&lt;/h1&gt;&lt;p&gt;初，权谓吕蒙曰：“卿今当涂掌事，不可不学！”蒙辞以军中多务。权曰：“孤岂欲卿治经为博</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="《孙权劝学》司马光"><a href="#《孙权劝学》司马光" class="headerlink" title="《孙权劝学》司马光"></a>《孙权劝学》司马光</h1><p>初，权谓吕蒙曰：“卿今当涂掌事，不可不学！”蒙辞以军中多务。权曰：“孤岂欲卿治经为博士邪！但当涉猎，见往事耳。卿言多务，孰若孤？孤常读书，自以为大有所益。”蒙乃始就学。及鲁肃过寻阳，与蒙论议，大惊曰：<strong>“卿今者才略，非复吴下阿蒙！”</strong>蒙曰：<strong>“士别三日，即更刮目相待，大兄何见事之晚乎！”</strong>肃遂拜蒙母，结友而别。</p><p>译文：</p><p>起初，孙权对吕蒙说：“你现在掌管政事，不可以不学习！”吕蒙用军中事务繁多来推托。孙权说：“我难道想要你研究儒家经典，成为专掌经学传授的学官吗？我只是让你应当粗略地阅读，了解历史。你说军务繁多，谁比得上我事务多呢？我经常读书，自己觉得获益颇多。”吕蒙于是开始学习。等到鲁肃到寻阳的时候，鲁肃和吕蒙一起讨论议事，鲁肃十分吃惊地说：“你现在军事方面的才干和谋略，不再是在吴下时没有才学的阿蒙了！”吕蒙说：“与读书的人分别几天，就应当用新的眼光看待，大兄你知晓事情为什么这么晚呢？”于是鲁肃拜见吕蒙的母亲，和吕蒙结为好友后离开了。</p><p>感悟：</p><p>我们不能以一成不变的事物看待他人，要以开放的眼光看待事物。</p><h1 id="《念奴娇·赤壁怀古》苏轼"><a href="#《念奴娇·赤壁怀古》苏轼" class="headerlink" title="《念奴娇·赤壁怀古》苏轼"></a>《念奴娇·赤壁怀古》苏轼</h1><p>大江东去，浪淘尽，千古风流人物。<br>故垒西边，人道是，三国周郎赤壁。<br>乱石穿空，惊涛拍岸，卷起千堆雪。<br>江山如画，一时多少豪杰。</p><p><strong>遥想公瑾当年，小乔初嫁了，雄姿英发。</strong><br>羽扇纶（guan）巾，谈笑间，樯橹灰飞烟灭。(樯橹 一作：强虏)<br>故国神游，多情应笑我，早生华发。<br>人生如梦，一尊还酹（lei）江月。(人生 一作：人间；尊 同：樽)</p><p>译文：</p><p>滚滚长江向东奔流而去，千百年来奔腾不息的滔滔巨浪淘尽了多少杰出的英雄人物。<br>旧日营垒的西边，有人说，那儿是三国时周瑜大破曹军的赤壁。<br>只见陡峭纷乱的岩壁耸入云霄，汹涌澎湃的巨浪拍打着江岸，卷起无数堆雪白的浪花。<br>雄壮的江山奇丽如画，一时间涌现了多少英雄豪杰。<br>我不禁遥想起当年的周公瑾，美丽的小乔刚嫁给他，英姿雄健风度翩翩神采照人。<br>手摇羽扇，头戴纶巾，谈笑之间，就将曹军的战船烧得灰飞烟灭。<br>如今我身临古战场神游往昔，应笑我多愁善感，以至于过早生出了白发。<br>人生在世犹如大梦一场，还是洒一杯酒祭献给江中伴我的明月吧！</p><p>感悟：</p><p>经历诸多事情后，才明白”遥想公瑾当年，小乔初嫁了，雄姿英发“是多么的意气风发、风华正茂。</p>]]></content:encoded>
      
      
      <category domain="https://HNUrookie1.github.io/categories/Poem/">Poem</category>
      
      
      <category domain="https://HNUrookie1.github.io/tags/Poem/">Poem</category>
      
      
      <comments>https://hnurookie1.github.io/2024/09/21/Poem/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>https://hnurookie1.github.io/2024/08/05/%E6%97%A0%E9%A2%98/</link>
      <guid>https://hnurookie1.github.io/2024/08/05/%E6%97%A0%E9%A2%98/</guid>
      <pubDate>Mon, 05 Aug 2024 14:30:45 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;《离思五首·其四》元稹&quot;&gt;&lt;a href=&quot;#《离思五首·其四》元稹&quot; class=&quot;headerlink&quot; title=&quot;《离思五首·其四》元稹&quot;&gt;&lt;/a&gt;《离思五首·其四》&lt;strong&gt;元稹&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;曾经沧海难为水，除却巫山不是云。&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="《离思五首·其四》元稹"><a href="#《离思五首·其四》元稹" class="headerlink" title="《离思五首·其四》元稹"></a>《离思五首·其四》<strong>元稹</strong></h3><p>曾经沧海难为水，除却巫山不是云。</p><p>取次花丛懒回顾，半缘修道半缘君。</p><h3 id="《飞鸟集》片段-泰戈尔"><a href="#《飞鸟集》片段-泰戈尔" class="headerlink" title="《飞鸟集》片段 泰戈尔"></a>《飞鸟集》片段 <strong>泰戈尔</strong></h3><p>浮世三千，吾爱有三，日月与卿，日为朝，月为暮，卿为朝朝暮暮。</p><h3 id="《鹊桥仙》-秦观"><a href="#《鹊桥仙》-秦观" class="headerlink" title="《鹊桥仙》 秦观"></a>《鹊桥仙》 <strong>秦观</strong></h3><p>纤云弄巧，飞星传恨，银汉迢迢暗度。金风玉露一相逢，便胜却人间无数。</p><p>柔情似水，佳期如梦，忍顾鹊桥归路。两情若是久长时，又岂在朝朝暮暮。</p><h3 id="江城子·乙卯正月二十日夜记梦-苏轼"><a href="#江城子·乙卯正月二十日夜记梦-苏轼" class="headerlink" title="江城子·乙卯正月二十日夜记梦 苏轼"></a>江城子·乙卯正月二十日夜记梦 <strong>苏轼</strong></h3><p>十年生死两茫茫，不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。</p><p>夜来幽梦忽还乡，小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。</p><h3 id="蒲松龄自勉联"><a href="#蒲松龄自勉联" class="headerlink" title="蒲松龄自勉联"></a>蒲松龄自勉联</h3><p>有志者，事竟成，破釜沉舟，百二秦关终属楚；</p><p>苦心人，天不负，卧薪尝胆，三千越甲可吞吴。</p><h3 id="蝶恋花-柳永"><a href="#蝶恋花-柳永" class="headerlink" title="蝶恋花 柳永"></a>蝶恋花 <strong>柳永</strong></h3><p>伫倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭阑意。</p><p>拟把疏狂图一醉，对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。</p><h3 id="上邪"><a href="#上邪" class="headerlink" title="上邪"></a>上邪</h3><p>上邪！我欲与君相知，长命无绝衰。山无陵，江水为竭，冬雷震震，夏雨雪，天地合，乃敢与君绝。 </p><h3 id="马嵬·其二-唐-李商隐"><a href="#马嵬·其二-唐-李商隐" class="headerlink" title="马嵬·其二 唐 李商隐"></a>马嵬·其二 <strong>唐 李商隐</strong></h3><p>海外徒闻更九州，他生未卜此生休。</p><p>空闻虎旅传宵柝，无复鸡人报晓筹。</p><p>此日六军同驻马，当时七夕笑牵牛。</p><p>如何四纪为天子，不及卢家有莫愁。</p>]]></content:encoded>
      
      
      <category domain="https://HNUrookie1.github.io/categories/Life-Record/">Life Record</category>
      
      
      
      <comments>https://hnurookie1.github.io/2024/08/05/%E6%97%A0%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我是谁，我是一个什么样的人</title>
      <link>https://hnurookie1.github.io/2024/08/05/%E6%88%91%E6%98%AF%E8%B0%81%EF%BC%8C%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA/</link>
      <guid>https://hnurookie1.github.io/2024/08/05/%E6%88%91%E6%98%AF%E8%B0%81%EF%BC%8C%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA/</guid>
      <pubDate>Mon, 05 Aug 2024 14:30:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;有人为了家族兴旺而活，他觉得自己的人生很有价值，很幸福；也有人无所羁绊，只为了自由而活，他也觉得自己很幸福。&lt;br&gt;有人奔波忙碌，但是精神饱满，斗志昂扬；也有人平平淡淡，也知足常乐，过的安详。&lt;br&gt;我们总想探讨哪种人才是人生的真谛，这些到底是对是错？但其实大多时候，不过是</description>
        
      
      
      
      <content:encoded><![CDATA[<p>有人为了家族兴旺而活，他觉得自己的人生很有价值，很幸福；也有人无所羁绊，只为了自由而活，他也觉得自己很幸福。<br>有人奔波忙碌，但是精神饱满，斗志昂扬；也有人平平淡淡，也知足常乐，过的安详。<br>我们总想探讨哪种人才是人生的真谛，这些到底是对是错？但其实大多时候，不过是基于你的精神世界，哪种是你真实想要的罢了。<br>人生的悲剧不在于你选了哪种，而在于你所选的，不是你真心认可的。例如：周围的人，都跟你说，考个编，过个安稳日子才是最香的。<br>这话对不对？对于那些真心认可这种生活的人就对，而对于那些没有主见，不知道自己想要什么的人未必就对。<br>所以，一切都回到了起点，先搞清楚“我是谁？我是一个什么样的人”的问题，这很重要。</p><p><img src="/images/%E6%9C%88%E5%85%89%E4%B9%8B%E4%B8%8B.jpg" alt="月光之下"></p>]]></content:encoded>
      
      
      <category domain="https://HNUrookie1.github.io/categories/Life-Record/">Life Record</category>
      
      
      
      <comments>https://hnurookie1.github.io/2024/08/05/%E6%88%91%E6%98%AF%E8%B0%81%EF%BC%8C%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>吃一堑长一智</title>
      <link>https://hnurookie1.github.io/2024/08/05/%E5%90%83%E4%B8%80%E5%A0%91%E9%95%BF%E4%B8%80%E6%99%BA/</link>
      <guid>https://hnurookie1.github.io/2024/08/05/%E5%90%83%E4%B8%80%E5%A0%91%E9%95%BF%E4%B8%80%E6%99%BA/</guid>
      <pubDate>Mon, 05 Aug 2024 14:30:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;前几天接了一个python大作业，要求是爬取一个文本数据，然后进行数据分析，代码比较简单而且有模板可以套用。想说的是什么：事先一定要和甲方谈好需求，包括他们在哪里要求跑程序。这次就是没说清环境，我在本地跑的好好的，到了甲方那里不会配置环境，结果又帮他配置环境，到头来搞得很麻</description>
        
      
      
      
      <content:encoded><![CDATA[<p>前几天接了一个python大作业，要求是爬取一个文本数据，然后进行数据分析，代码比较简单而且有模板可以套用。想说的是什么：事先一定要和甲方谈好需求，包括他们在哪里要求跑程序。这次就是没说清环境，我在本地跑的好好的，到了甲方那里不会配置环境，结果又帮他配置环境，到头来搞得很麻烦。所以说，和甲方讲好需求很重要。</p>]]></content:encoded>
      
      
      <category domain="https://HNUrookie1.github.io/categories/Life-Record/">Life Record</category>
      
      
      
      <comments>https://hnurookie1.github.io/2024/08/05/%E5%90%83%E4%B8%80%E5%A0%91%E9%95%BF%E4%B8%80%E6%99%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://hnurookie1.github.io/2024/08/05/hello-world/</link>
      <guid>https://hnurookie1.github.io/2024/08/05/hello-world/</guid>
      <pubDate>Mon, 05 Aug 2024 14:30:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://hnurookie1.github.io/2024/08/05/hello-world/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>放假反省</title>
      <link>https://hnurookie1.github.io/2024/07/13/%E6%94%BE%E5%81%87/</link>
      <guid>https://hnurookie1.github.io/2024/07/13/%E6%94%BE%E5%81%87/</guid>
      <pubDate>Sat, 13 Jul 2024 14:07:03 GMT</pubDate>
      
      <description>Here&#39;s something encrypted, password is required to continue reading.</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7e1a25cea275faabdb9aa8d25860458cf8609cbf597e9716534839f830665c9f">54e3726371269f5f4d16eecc3c6bcb4294d1ceff3847bbb1c1d7111be0949bb9f104514ddc5434542afeee4f4852693891615e7a4e810e7a0c99ee305a051e97e2bfb026ce43aa1ad064f5a1d980d72e4e05ae2f8bd35f761bbf68f5e49ae0f6cd615672be48511a35bcab13e8f30836959297a0d79fb610988f66becb0269f1006cce64282c49e5778a527a633e375ccf90969df7969808a24c7620d7ad987324e9a730be5bb24e1a717f879d91451b7ff0f257497c8044452e834bd089eea1c53bd15beb0c1015daa435a43afd230756e29743f1518115998c70e7556cc5089e35992458fef1dc5e398936ed53c0fafdb3949c33d7f597b0f85f810b52b0a55246ef81c3017bd2f599ad3068dfa15a62301976c219b74ffbc8cb9782f763a25cdaf35fcb758b1e3c47a221e25c86d6c673d1f90ca67809642b3c35ccf9b4ed91a44275750b4214174b7b811ec9453729883bec1e497e3b3e895a4cb8e317b263f50c91c3107e81e4d92305cee1fd252e72efb3f1ee73fffc93247341dc0f8a86824289687ecf88e4721248d0826be749d07ccd62f5f097311c3d3c96a2ffffcf7b94659a5375a133698fad7ea6448b391abfa9ca0167707effeafcbc2529d90fe7f391710a49ec0180896c66bb7b0f73c7184f093e0eefe621c33173402171dcf8eaef45bbcaa1395c138ab1cee75139b7e827c2352989fcd87ba703440377c08deebe0478359e0f5ec33c659eb0e24397fa1a2422b160dc13dbf59b49664008c036a5baebbc3d878fe798aae2f9d273ad592420a214e287d81fda9d763c86b62375095603a8d0a2b82807def84908a791a58de4c96b5626f3f9ea590d70cf30ebd62b076b55bd33de0e76874c974d7afe3d2c4135888f7a36eebcce04ba07d83699216df408eda85adaae8f28d35ba37c2ae9929bab2fc5099838b2d89f1a272faf47e72a25596da61ce4e1b8f96b56e0a7e3f9a12f0c7c13f27508fce5537834132272d9b12c16d8bc8bfb5fb17a4b6dfa9fd054b131c48db7d9d79eefb47c3b4f4ab04feaf8d1faebbb9cae6bdc6d42e9de3bb9ebe70e0655c0c39695a856e89b50b515b2c00379e22ded6702b180723069aabb06c4c40a267d321256b8387d7004bcef11360dd3320e2b3aca5d6047713f17a27bb503a5e376d51ae4f9b2010d91341eaa20db41eef0d8efc0b71c3139e65e6e6268bfc08503f3a8fb55b7a2dad80f12f7d91b3c0179b0740485100b18ec6484686720e7cae3c64a89d5138db29da166fc1232332cac2c7369cce06a4c6fa04e09e2f2d555b731b4620db198b285923ef0e419959a05ad3efdd766e12dbe859de953bb5d20c29e5cc596144c28fbeafef74416c0c8fa79d0a5a353eee6fbd5558fef9d38f6be6fec95def465f1fe598d622ffca8f0c3631d5eb748d74542c3c99c6474916e2da96efa09c93790fd6e9acd22572c1c7175407048bc326efa182cd717777bcec3a750eb5840a9cf3d3d9de106b5593ca681cf80df347ec67f4b22a2dea7087c76b585557744beed338cd20f49b7ce0e68d74965a40e72bdb54bb2dd0a3a60ba70fdadd2cf2a4f2a9fd9b831364d352e17f34ecec39c0c195ef1510d51bbacd4926c1811a980803bee50c7b3518e7ac024257c0728b4a9c3ac9e440f669761827e63f12bfebf4eed3868d3a309fffb6f4c34d415e6b9389164368925d701f06666dc2155dba5a416a71ca53dd3901701aea3daa09778d2d2e0b1a2ebe3995045c26c385424e90360b17559becb277ec3b1fd75fcc37698c96bc7180eb7b26f2cec8be5dd873c4d07b4415ffe825b9afa63d6450c417f4c8670db5819407f637e3e19b4061ef948627b0558428d355e40f9642affe8cb1215f8b440d570493b6de21480be16ac7625b62e30d3ea47500c39406e8603826f43846f79c1d9ca000bb302e36ff9f4ebde7248323586484a2d572990599607145134ad8225c3c3be3146583953590853ee1a4290f5eac09e9465b9cb9bc9e53eacb4032c83666d20ea893e95f34d97e6ddc630e7d1b7fe983ef357557af6b6c671fc53dce10724478b5c3556d6dadd2d578cf29b968ab29ea3223667f20a386a3376e83a7d352602543e276fdcbdc64ab331120895bcc5e722deea93e5c04e15c0ff438c6434d6d54ce21afe043b8974fd9ec1e0ebd58116c44406395030ce6c874c058a3319febd031d1122b0fefc5d257a8e020fa158416c095c9b129066504d1fd6517ee1f2f11ef1ad429a3f34f7782bb7bb4436ba244fd5f490182e943c4e349e39290a93b97e829253ee218609165bf8adc02acb521a0db14c83fb2f541424936be3558ea7c87b2ca0ba34e0039a0ddb439dd227b528d9dcff6b9f29f0cef4550d2fdc2761ea48e3f8b4540e89d02a6a86228959e4fe473a7a8a14846e230724b5b67cf85db00781d404864bd66ff52c10a88c30561c203e5b2dbb2efdfffad2b3830488af33cfdd20aa3b75e651596759cf20e7a87401437ede28340dd59603ed765a02b4eb7e0263425e0e9a22d80a5229c3b1180b9094c342c7dad1f7382dc80283d800b083b6fff1f87abcf914ce2bddaceb2f92b3bd733e3a7ddc7c8453c7062ce1ea4ef08e52a9bb4c8bd61e000498ee693bbd4cd3cfce62f0e1d8482e3c7a8f4f80757a5c3edb5a1e98dc064b9ad53f1b8d32c39e2b93d6548d818cebdc182c0c7e0eaae6ead1851fd4bcf28685300d153088a89689c7fcd4c9422a5b937282b42afedf658378aedf90f33a4668e1d4308b21571b25b22c529c81210c48fd9c523096f54ce723c4f8504aff331ced508779068cbf0ad1f9dc8f4c8d371e6e05fb00fdd93fa6d2d3f512223f314b256f6f56cfa4669142bb209f4a7224d50e1863c4a47ea337bc027f81b8a31fabea8df5e328566b06b56d42b426806b8a26ae53859d6c36dae5f713f071c30589156da5bf5711d5995c1ee26d8420243c63afa63d528ac1d365cd4677c13f89d221fbe3c7480186cd6737405cecdc023fc729fed4dba80306c1939dfa3fc93b30b6bb2e9d14e8a1f977c415e14fc634a56ba7f61f315aa143f7760288383a7bd6d52d21c86c088af7770176aff7f50805e6fdbe50a5a98619f7503746f2baa2f04e91a23c61ddd00fa7df33609b68a3d07b20f5a93d3f4c81d48e000c71de237c4e6133e713dc47a1dffaa9a3f4a3adee35029f7fce8a10f566b7b5301b1c885b8c5882aa718efb159497f3deec0cf68ea3d3481c5a9c913795535765c6ccc684c2c0363dc76caac049751ffd2d2fb0df1872f6f50dd375b9aad67a702cc1920fea938637fac520ba280299b52734f5e85662af67e381457913442091c02e390b017207ec502aba217e4b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      
      <category domain="https://HNUrookie1.github.io/tags/Life-Record/">Life Record</category>
      
      
      <comments>https://hnurookie1.github.io/2024/07/13/%E6%94%BE%E5%81%87/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>夏令营面试</title>
      <link>https://hnurookie1.github.io/2024/07/07/%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%9D%A2%E8%AF%95/</link>
      <guid>https://hnurookie1.github.io/2024/07/07/%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%9D%A2%E8%AF%95/</guid>
      <pubDate>Sun, 07 Jul 2024 02:45:39 GMT</pubDate>
      
      <description>Here&#39;s something encrypted, password is required to continue reading.</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="951aaaeb503ab223966faf29b4a0a832d10646c276deb96940389b37a8d915d6">54e3726371269f5f4d16eecc3c6bcb42d185cacc6501b297ebb531def94b648a782469698b7eee9c4be4e8b63bc00fb0dd092588a7bc62532298e4ad870aae4b1fa7bde180b9f2fec2c70e58a56d8b0a8361919c35db03bdd4a4c5e3525db718ca00839ae692b722fa90c1ef8748526a3e2ffad3fec764b2854c4660dbf35007c7d7e292a9e403fca3c4b7fbcb69d27493f53844f753f94714bed5cdab07febc71150733369d3a5a3b16562185f93c3359f47ac5c7ef21164b00aafc520a16e42b2d648219f7757e9fb22716cf42b6f6739262c084c98ca974aabc84f30c25d2fdc0659ac5579776ec90c6ac8d8b43ad93c27eb2936f84b4b63779b65cfac5959100e3bb443e94c3e7067720cd5554406ffff5cea597a437adc41239064d0bbd75bab5f498fd4249725405efeb7e8999c42281eef3616c5d7c8d9a5fd097937e371d18b66d4d9dfccc88df8aa9121f67cb2e39423b59c471b961cef54cb6cc7d00c25a60993378765a0c77c8db51fa36e8d6d8d7d9e8ffe66e6d32634ec3812ca3e81cc5a1390bbb17d7e5e6d7341fcc1ead6f3d5fec8bc2970fa1c7039252f3047f69a1724965e9bf7f3425a539a6b9d8528d451eb07c1cd3aba4bb9c2c58012113a9e7ff0476edd7d2c79d3b87a782729507ce5e5a826c9c7d3950aa07c05301bdb4751150496d6c383b356df4b9e0acea240169c200dce0c207198664743a9c59a60f15bf77bb3723f3fbf3fbd1f2842a83026fea9967616cd6631778178274a962a120383443dc3d77c3463ca4a6dadfd28e9714922df3492ee83f825c397d4b3a60a170dcc061db649623852d7650323dd6af38a5542300e86e51d2fca77a8bf101af099bee0eaa63a648c195e363ca1540250d7c9f004bad03fd79576f148faa22b1b86f0759248dd53b5037fe6c4e85514c2838b99e9e4d36f7aca3fbdebeb5fef78584e78501dac8bffd866f55acd9d453fcd49e9954987393243ddfb52a7d4d3e6cf0dd2dc1db995c2bff97c69ea1d7e21fff96371f8a04a06110ba8b7dd1ea643aef02afaebfb06fcc76d4fa2c84563bc0177a3bf76a4e8dfe7b5869adc9c19c48cbd76f169ac3579394a4acb3b7cd6dae140e142e34238b358db809a2b47167b79e637b426874c0899e686faef4fb5a0a72b2401397844b60c3255086ee851328df58e2a4252e7106b31ef034ca1531e42765f703203965dfddad9b4c01292eea5fe569830d989d14e45d945e4bbf3012abce8afed2ca6d2ae32be708d49d3f159ae3cce64ced342e8510ae0e58babd9e121775c0230e51d27ec5876dd9e5f00bf257dafde600353dc92e3af608d7f063a93202db06cd8437849f07d0a2f6f7b680003c627619ee5d2567c69bb458ead14465c79cea0a3648da4de9cd83acc67b891ebe29745167a6cda61abce21ea55d76ec88f35567ae6a62e1ccaacae3c6f9bd3d8541866034ec82727459b0ed1e185266fb95a96a3a25498e80a730e75c5c3bf01109a02897228a94af8c2acd77df00043c32a7580a95aa9384abc162f2e5dd645bf7c4f5ef3da1f5828a331af4d73c153130902d2a39e1197584851234959d47a5af31b04b30bf1a60da81e3c73109769970dc117b2ffe43347f330ce28ef0a159ec7744536b110750ae79a0177943435261cb780ddd332e9c85f8cf5ce333d563489d13143cb6691d441688740f25ac718bb9099aa8f2850aa9b13ab9582c42f75d273503753b377b922bb197aedee5347cd001ae707ed8a7e26ae8f416edd12c077169743ca4d24c1f9f67231e51e9d64d6d861e2f44ae5a6047ac8f25f8390a0a1ba0937e21fe5e01c9227ab3591c08bb8e99ff2952bbbae7c46ce844313f8c1c9d08950719b8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      
      <category domain="https://HNUrookie1.github.io/tags/Life-Record/">Life Record</category>
      
      
      <comments>https://hnurookie1.github.io/2024/07/07/%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%9D%A2%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PGP实现</title>
      <link>https://hnurookie1.github.io/2024/06/30/PGP%E5%AE%9E%E7%8E%B0/</link>
      <guid>https://hnurookie1.github.io/2024/06/30/PGP%E5%AE%9E%E7%8E%B0/</guid>
      <pubDate>Sun, 30 Jun 2024 10:57:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;请转至&lt;a href=&quot;http://t.csdnimg.cn/gLlHS&quot;&gt;http://t.csdnimg.cn/gLlHS&lt;/a&gt; ！&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>请转至<a href="http://t.csdnimg.cn/gLlHS">http://t.csdnimg.cn/gLlHS</a> ！</p>]]></content:encoded>
      
      
      <category domain="https://HNUrookie1.github.io/categories/cryptography/">cryptography</category>
      
      
      <category domain="https://HNUrookie1.github.io/tags/cryptography/">cryptography</category>
      
      
      <comments>https://hnurookie1.github.io/2024/06/30/PGP%E5%AE%9E%E7%8E%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计网学习笔记</title>
      <link>https://hnurookie1.github.io/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/</link>
      <guid>https://hnurookie1.github.io/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Fri, 28 Jun 2024 09:05:41 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h1&gt;&lt;h2 id=&quot;拥塞控制&quot;&gt;&lt;a href=&quot;#拥塞控制&quot; class=&quot;headerlink&quot; title=&quot;拥塞控制&quot;&gt;&lt;/a&gt;拥塞控</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><ul><li>在某段时间，若对网络中某一资源的需要超过了该资源所能提供的可用部分，网络性能就要变坏。这种情况叫做拥塞（congestion）。<ul><li>在计算机网络中的链路容量（即带宽）、交换节点中的缓存和处理机等，都是网络的资源。</li></ul></li><li>若出现拥塞而不进行控制，整个网络的吞吐量将随负荷的增大而下降。<br><img src="/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/1.png"></li><li>TCP的四种拥塞控制算法：慢开始（slow start）、拥塞避免（congestion avoidance）、快重传（fast retransmit）、快恢复（fast recovery）。</li></ul><h3 id="慢开始、拥塞避免"><a href="#慢开始、拥塞避免" class="headerlink" title="慢开始、拥塞避免"></a>慢开始、拥塞避免</h3><p><img src="/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/2.png"></p><ul><li>发送方维护一个叫做<strong>拥塞窗口cwnd</strong>的状态变量，其值<strong>取决于网络的拥塞程度</strong>，并且<strong>动态变化</strong>。<ul><li>拥塞窗口cwnd的维护原则：只要网络没有出现拥塞，拥塞窗口就在增大一些；但只要网络出现拥塞，拥塞窗口就减少一些。</li><li>判断出现网络拥塞的依据：没有按时收到应当到达的确认报文（即发生重传）。</li></ul></li><li>发送方将拥塞窗口作为发送窗口，即<strong>swnd &#x3D; cwnd</strong>。</li><li>维护一个慢开始门限<strong>ssthresh</strong>的状态变量：<ul><li>当cwnd &lt; ssthresh时，<strong>使用慢开始算法，每收到一个报文段的确认cwnd加1</strong>；</li><li>当cwnd &gt; ssthtesh时，停止使用慢开始算法而<strong>改用拥塞避免算法，每经过一个往返时延cwnd加1；</strong></li><li>当cwnd &#x3D; ssthres时，既可以使用慢开始算法，也可以使用拥塞避免算法。<br><img src="/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/3.png"></li></ul></li><li>“慢开始”是指一开始向网络中注入的报文段少，并不是指拥塞窗口cwnd增长速度慢；</li><li>“拥塞避免”并非指完全能够避免拥塞，而是指在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</li></ul><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ul><li>慢开始和拥塞避免算法是1988年提出的TCP拥塞控制算法（TCP Tahoe版本）。</li><li>1990年又增加了两个新的拥塞控制算法（改进TCP的性能），这就是快重传和快恢复（TCP Reno版本）。<ul><li>有时，个别报文段会在网络中丢失，但实际上网络并未发生拥塞。<ul><li>这将导致发送方超时重传，并误认为网络发生了拥塞；</li><li>发送方错误地启动慢开始算法，并把拥塞窗口cwnd又设置为最小值1，因而降低了传输效率。<br><img src="/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/4.png"></li></ul></li></ul></li><li>采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。</li><li>所谓快重传，就是使发送方尽快进行重传，而不是等待重传计时器超时再重传。<ul><li>要求接收方不要等待自己发送数据时才进行捎带确认，而是要<strong>立即发送确认</strong>；</li><li>即使收到了失序（不是按照顺序来的）报文段也要立即发出对已收到报文段的<strong>重复确认</strong>；</li><li>发送方一旦<strong>收到3个连续的重复确认</strong>，就将相应的报文段<strong>立即重传</strong>，而是不是等到该报文段的超时重传计时器超时在重传。</li><li>对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞（进而降低拥塞窗口cwnd为1）。使用快重传可以使得整个网络的吞吐量提高约20%。<br><img src="/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/5.png"></li></ul></li></ul><h3 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h3><ul><li>发送方一旦<strong>收到3个重复确认</strong>，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而是<strong>执行快恢复算法</strong>。令ssthresh &#x3D; cwnd &#x3D; cwnd&#x2F;2。</li><li>也有的快恢复实现是把恢复开始时的拥塞窗口cwnd值再增大一些，即等于新的ssthresh + 3；<ul><li>既然发送方收到3个重复的确认，就表明有3个数据报文段已经离开了网络；</li><li>这3个报文段不再消耗网络资源而是停留在接收方的接收缓存中；</li><li>可见现在网络中你不是堆积了报文段而是减少了3个报文段。因此可以适当把拥塞窗口扩大些。<br><img src="/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/6.png"></li></ul></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://HNUrookie1.github.io/tags/Computer-Network/">Computer Network</category>
      
      
      <comments>https://hnurookie1.github.io/2024/06/28/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git学习笔记</title>
      <link>https://hnurookie1.github.io/2024/05/22/Git%E5%AD%A6%E4%B9%A0/</link>
      <guid>https://hnurookie1.github.io/2024/05/22/Git%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Tue, 21 May 2024 16:18:35 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Git分支-分支简介-2024-5-24&quot;&gt;&lt;a href=&quot;#Git分支-分支简介-2024-5-24&quot; class=&quot;headerlink&quot; title=&quot;Git分支-分支简介(2024-5-24)&quot;&gt;&lt;/a&gt;Git分支-分支简介(2024-5-24)&lt;/h1</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Git分支-分支简介-2024-5-24"><a href="#Git分支-分支简介-2024-5-24" class="headerlink" title="Git分支-分支简介(2024-5-24)"></a>Git分支-分支简介(2024-5-24)</h1><p>几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从主线上分离开来，以免影响开发主线。在很多版本控制系统中，这是一个略微低效的过程–常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。<br>有人把Git的分支模型称为它的“必杀技特性”，也正因为这一特性，使得Git从众多版本控制系统中脱颖而出。为何Git的分支模型如此出众呢？Git处理分支的方式可谓是难以执行的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。与许多其他版本控制系统不同，Git鼓励在工作流程中频繁地使用分支与合并，哪怕一天内进行许多次。理解和精通这一特性，你便会意识到Git是如此的强大而又独特，并且从此真正改变你的开发方式。</p><h2 id="分支简介"><a href="#分支简介" class="headerlink" title="分支简介"></a>分支简介</h2><p>为了真正理解Git处理分支的方式，我们需要回顾以下Git是如何保存数据的。<br>Git保存的不是文件的变化或者差异，而是一系列不同时刻的快照。<br>在进行提交操作时，Git会保存一个提交对象（commit object）。知道了Git保存数据的方式，我们可以很自然的想到–该提交对象会包含一个指向暂存内容快照的指针。但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象还没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。<br>为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。暂存操作会为每一个文件计算校验和（使用SHA-1哈希算法），然后会把当前版本的文件快照保存到Git仓库中（Git使用blob对象来保存它们），最终将校验和加入到暂存区域等待提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add README test.rb LICENSE</span><br><span class="line">$ git commit -m &quot;The initial commit of my project&quot;</span><br></pre></td></tr></table></figure><p>当使用<code>git commit</code>进行提交操作时，Git会先计算每一个子目录（本目录中只有项目根目录）的校验和，然后在Git仓库中将这些校验和保存为树对象。</p><h1 id="Git分支-远程分支-2024-5-22"><a href="#Git分支-远程分支-2024-5-22" class="headerlink" title="Git分支-远程分支(2024-5-22)"></a>Git分支-远程分支(2024-5-22)</h1><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><p>远程引用时对远程仓库的引用（指针），包括分支、标签等等。你可以通过 <code>git ls-remote &lt;remote&gt;</code>来显示地获取远程引用的完整列表，或者通过<code>git remote show &lt;remote&gt;</code>来获取远程分支的更多信息。然而，一个更常见的做法是利用远程跟踪分支。<br>远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信，Git就会为你移动它们以精确反应远程仓库的状态。请将它们看做书签，这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。<del>休息，明天再写</del><br><strong>（2024-5-23）</strong><br>它们以<code>&lt;remote&gt;/&lt;branch&gt;</code>的形式命名。例如，如果你想要看你最后一次与远程仓库<code>origin</code>通信时<code>master</code>分支的状态，你可以查看<code>&lt;origin&gt;/&lt;branch&gt;</code>分支。你与同是合作解决一个问题并且她们推送了一个<code>iss53</code>分支，你可能有自己的本地<code>iss53</code>分支，然而在服务器上的分支会以<code>origin/iss53</code>来表示。<br>这可能有一点难以理解，让我们来看一个例子。假如你的网络里有一个在<code>git.ourcompany.com</code>的Git服务器。如果你从这里克隆，Git的<code>clone</code>命令会为你自动将其命名为<code>ogigin</code>，拉去它的所有数据，创建一个指向它的<code>master</code>分支，并且在本地将其命名为<code>origin/master</code>。Git也会给你一个与origin的<code>master</code>分支在指向同一个地方的本地<code>master</code>分支，这样你就有工作的基础。<br><strong>Note</strong>:<br>“origin” 并无特殊含义<br>远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 <code>git clone -o booyah</code>，那么你默认的远程分支名字将会是 <code>booyah/master</code>。<br><img src="/2024/05/22/Git%E5%AD%A6%E4%B9%A0/1.png"><br>如果你在本地的 <code>master</code> 分支做了一些工作，在同一段时间内有其他人推送提交到 <code>git.ourcompany.com</code> 并且更新了它的 <code>master</code> 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 <code>origin</code> 服务器连接（并拉取数据），你的 <code>origin/master</code> 指针就不会移动。<br><img src="/2024/05/22/Git%E5%AD%A6%E4%B9%A0/2.png"><br>如果要与给定的远程仓库同步数据，运行 <code>git fetch &lt;remote&gt;</code> 命令（在本例中为 <code>git fetch origin</code>）。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 <code>git.ourcompany.com</code>）， 从中抓取本地没有的数据，并且更新本地数据库，移动 <code>origin/master</code> 指针到更新之后的位置。<br><img src="/2024/05/22/Git%E5%AD%A6%E4%B9%A0/3.png"><br>为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。 这个服务器位于 <code>git.team1.ourcompany.com</code>。 你可以运行 <code>git remote add teamone git://git.team1.ourcompany.com</code> 命令添加一个新的远程仓库引用到当前的项目，将这个远程仓库命名为 <code>teamone</code>，将其作为完整 URL 的缩写。<br><img src="/2024/05/22/Git%E5%AD%A6%E4%B9%A0/4.png"><br>现在，可以运行 <code>git fetch teamone</code> 来抓取远程仓库 <code>teamone</code> 有而本地没有的数据。 因为那台服务器上现有的数据是 <code>origin</code> 服务器上的一个子集， 所以 Git 并不会抓取数据而是会设置远程跟踪分支 <code>teamone/master</code> 指向 <code>teamone</code> 的 <code>master</code> 分支。<br><img src="/2024/05/22/Git%E5%AD%A6%E4%B9%A0/5.png"></p><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><p>当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。</p><p>如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 <code>git push &lt;remote&gt; &lt;branch&gt;</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin serverfix</span><br><span class="line">Counting objects: 24, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (15/15), done.</span><br><span class="line">Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.</span><br><span class="line">Total 24 (delta 2), reused 0 (delta 0)</span><br><span class="line">To https://github.com/schacon/simplegit</span><br><span class="line"> * [new branch]      serverfix -&gt; serverfix</span><br></pre></td></tr></table></figure><p>这里有些工作被简化了。 Git 自动将 <code>serverfix</code> 分支名字展开为 <code>refs/heads/serverfix:refs/heads/serverfix</code>， 那意味着，“推送本地的 <code>serverfix</code> 分支来更新远程仓库上的 <code>serverfix</code> 分支。” 你也可以运行 <code>git push origin serverfix:serverfix</code>， 它会做同样的事——也就是说“推送本地的 <code>serverfix</code> 分支，将其作为远程仓库的 <code>serverfix</code> 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。 如果并不想让远程仓库上的分支叫做 <code>serverfix</code>，可以运行 <code>git push origin serverfix:awesomebranch</code> 来将本地的 <code>serverfix</code> 分支推送到远程仓库上的 <code>awesomebranch</code> 分支。<br><strong>Note</strong><br><em>如何避免每次输入密码?</em><br>如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。 默认情况下它会在终端中提示服务器是否允许你进行推送。</p><p>如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 <code>git config --global credential.helper cache</code> 来设置它。</p><p>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 <code>origin/serverfix</code>，指向服务器的 <code>serverfix</code> 分支的引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">remote: Counting objects: 7, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 3 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From https://github.com/schacon/simplegit</span><br><span class="line"> * [new branch]      serverfix    -&gt; origin/serverfix</span><br></pre></td></tr></table></figure><p>要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 <code>serverfix</code> 分支——只有一个不可以修改的 <code>origin/serverfix</code> 指针。</p><p>可以运行 <code>git merge origin/serverfix</code> 将这些工作合并到当前所在的分支。 如果想要在自己的 <code>serverfix</code> 分支上工作，可以将其建立在远程跟踪分支之上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b serverfix origin/serverfix</span><br><span class="line">Branch serverfix set up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch &#x27;serverfix&#x27;</span><br></pre></td></tr></table></figure><p>这会给你一个用于工作的本地分支，并且起点位于 <code>origin/serverfix</code>。</p><h2 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h2><p>从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 <code>git pull</code>，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p><p>当克隆一个仓库时，它通常会自动地创建一个跟踪 <code>origin/master</code> 的 <code>master</code> 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 <code>master</code> 分支。 最简单的实例就是像之前看到的那样，运行 <code>git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</code>。 这是一个十分常用的操作所以 Git 提供了 <code>--track</code> 快捷方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --track origin/serverfix</span><br><span class="line">Branch serverfix set up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch &#x27;serverfix&#x27;</span><br></pre></td></tr></table></figure><p>由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout serverfix</span><br><span class="line">Branch serverfix set up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch &#x27;serverfix&#x27;</span><br></pre></td></tr></table></figure><p>如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b sf origin/serverfix</span><br><span class="line">Branch sf set up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch &#x27;sf&#x27;</span><br></pre></td></tr></table></figure><p>现在，本地分支  <code>sf</code> 会自动从 <code>origin/serverfix</code> 拉取。</p><p>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 <code>-u</code> 或 <code>--set-upstream-to</code> 选项运行 <code>git branch</code> 来显式地设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -u origin/serverfix</span><br><span class="line">Branch serverfix set up to track remote branch serverfix from origin.</span><br></pre></td></tr></table></figure><p><strong>Note</strong>:<br>具体来说，<code>git branch -u</code>（或 <code>--set-upstream-to</code>）命令用于将本地分支配置为跟踪一个特定的远程分支。这样，你在进行操作时（例如拉取或推送），Git 知道应该与哪个远程分支进行交互。  </p><p>举个例子：命令 $ <code>git branch -u origin/serverfix</code> 的含义如下：<br>该命令将本地 serverfix 分支设置为跟踪远程仓库 origin 上的 serverfix 分支。当你在 <code>serverfix</code> 分支上运行 <code>git pull</code> 或 <code>git push</code> 时，不需要再指定远程分支，Git 会默认与 <code>origin/serverfix</code> 进行交互。</p><p>如果想要查看设置的所有跟踪分支，可以使用 <code>git branch</code> 的 <code>-vv</code> 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -vv</span><br><span class="line">  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets</span><br><span class="line">  master    1ae2a45 [origin/master] deploying index fix</span><br><span class="line">* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it</span><br><span class="line">  testing   5ea463a trying something new</span><br></pre></td></tr></table></figure><p>这里可以看到 <code>iss53</code> 分支正在跟踪 <code>origin/iss53</code> 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 <code>master</code> 分支正在跟踪 <code>origin/master</code> 分支并且是最新的。 接下来可以看到 <code>serverfix</code> 分支正在跟踪 <code>teamone</code> 服务器上的<code> server-fix-good</code> 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 <code>testing</code> 分支并没有跟踪任何远程分支。</p><p>需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：<br><code>$ git fetch --all; git branch -vv</code></p><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><p>当 <code>git fetch</code> 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 <code>git pull</code> 在大多数情况下它的含义是一个 <code>git fetch</code> 紧接着一个 <code>git merge</code> 命令。 <strong>如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 <code>clone</code> 或 <code>checkout</code> 命令为你创建的，<code>git pull</code> 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。</strong></p><p>由于 <code>git pull</code> 的魔法经常令人困惑所以通常单独显式地使用 <code>fetch</code> 与 <code>merge</code> 命令会更好一些。</p><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><p>假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 <code>master</code> 分支（或任何其他稳定代码分支）。 可以运行带有 <code>--delete</code> 选项的 <code>git push</code> 命令来删除一个远程分支。 如果想要从服务器上删除 <code>serverfix</code> 分支，运行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete serverfix</span><br><span class="line">To https://github.com/schacon/simplegit</span><br><span class="line"> - [deleted]         serverfix</span><br></pre></td></tr></table></figure><p>基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。(完)</p>]]></content:encoded>
      
      
      <category domain="https://HNUrookie1.github.io/categories/Necessary-Tools/">Necessary Tools</category>
      
      
      <category domain="https://HNUrookie1.github.io/tags/Git/">Git</category>
      
      
      <comments>https://hnurookie1.github.io/2024/05/22/Git%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
